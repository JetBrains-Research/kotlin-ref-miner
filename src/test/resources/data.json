[
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "38448785791cffce8c453b04bcc3e217bb41f1e8",
        "refactorings": [
            {
                "description": "Rename Class shapes.BaseShape renamed to shapes.Shape"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "e839b0b7df4c4069515e695b9ab088c675522aac",
        "refactorings": [
            {
                "description": "Move Class shapes.Point moved to Point"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "b7fec8bacc7e10044ca8fbc85dc13264d1d894f9",
        "refactorings": [
            {
                "description": "Rename Method public getCoordinate() : String renamed to public getCoordinates() : String in class Point"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "0b6035254b55d010f22ef0bfde894cded906178e",
        "refactorings": [
            {
                "description": "Rename Class org.jetbrains.research.ml.codetracker.ui.panes.TaskController renamed to org.jetbrains.research.ml.codetracker.ui.panes.TaskSolvingController"
            },
            {
                "description": "Rename Class org.jetbrains.research.ml.codetracker.ui.panes.TaskControllerManager renamed to org.jetbrains.research.ml.codetracker.ui.panes.TaskSolvingControllerManager"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "e818280cae22dcee954baad9980b35c0b61776c3",
        "refactorings": [
            {
                "description": "Rename Class org.jetbrains.research.ml.codetracker.ui.panes.CountryListNotifier renamed to org.jetbrains.research.ml.codetracker.ui.panes.CountryComparatorNotifier"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "3fb9d8b408ac0d7e931333f25cdadc10bc1926b7",
        "refactorings": [
            {
                "description": "Add Parameter deleteAfter : Boolean in method public sendTrackingData(file File, deleteAfter Boolean) from class Server"
            },
            {
                "description": "Add Parameter deleteAfter : Boolean in method public sendTrackingData(file File, deleteAfter Boolean) from class PluginServer"
            },
            {
                "description": "Remove Parameter project : Project in method public startTracking(project Project) from class Plugin"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "e818280cae22dcee954baad9980b35c0b61776c3",
        "refactorings": [
            {
                "description": "Rename Class org.jetbrains.research.ml.codetracker.ui.panes.CountryListNotifier renamed to org.jetbrains.research.ml.codetracker.ui.panes.CountryComparatorNotifier"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "bd73697521f58d0c1d91d81d9747b65617aa986f",
        "refactorings": [
            {
                "description": "Add Parameter currentFileType : FileTypes in method private sendDataToServer(request Request, currentFileType FileTypes) : CompletableFuture<Void> from class PluginServer"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "0d8728b310668daf7af510e74315556b4eb23a60",
        "refactorings": [
            {
                "description": "Change Parameter Type t : Document to t : T in method public getData(t T) : List<S> in class org.jetbrains.research.ml.codetracker.tracking.LoggedData"
            },
            {
                "description": "Rename Method private createFile(project Project, task Task, language Language) : VirtualFile? renamed to private getOrCreateFile(project Project, task Task, language Language) : VirtualFile? in class org.jetbrains.research.ml.codetracker.tracking.TaskFileHandler"
            },
            {
                "description": "Change Parameter Type t : Unit to t : T in method public getData(t T) : List<S> in class org.jetbrains.research.ml.codetracker.tracking.LoggedData"
            },
            {
                "description": "Move Method public getData(t Document) : List<String?> from class org.jetbrains.research.ml.codetracker.tracking.DocumentLoggedData to public getData(t T) : List<S> from class org.jetbrains.research.ml.codetracker.tracking.LoggedData"
            },
            {
                "description": "Move Method public getData(t Unit) : List<String> from class org.jetbrains.research.ml.codetracker.tracking.UiLoggedData to public getData(t T) : List<S> from class org.jetbrains.research.ml.codetracker.tracking.LoggedData"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "49ad7099a7715347f4636a868ecd5c70c74df85f",
        "refactorings": [
            {
                "description": "Rename Method public getAvailableLanguages() : List<PaneLanguage> renamed to private findAvailableLanguages() : List<PaneLanguage> in class org.jetbrains.research.ml.codetracker.server.PluginServer"
            },
            {
                "description": "Rename Method public getPaneText() : PaneText? renamed to private findPaneText() : PaneText in class org.jetbrains.research.ml.codetracker.server.PluginServer"
            },
            {
                "description": "Rename Method public getCountries() : List<Country> renamed to private findCountries() : List<Country> in class org.jetbrains.research.ml.codetracker.server.PluginServer"
            },
            {
                "description": "Rename Method public getGenders() : List<Gender> renamed to private findGenders() : List<Gender> in class org.jetbrains.research.ml.codetracker.server.PluginServer"
            },
            {
                "description": "Rename Method public getTasks() : List<Task> renamed to private findTasks() : List<Task> in class org.jetbrains.research.ml.codetracker.server.PluginServer"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/lets-plot.git",
        "sha1": "11d3dcecf923a41c716fb100b5f283bf8d96a3ee",
        "refactorings": [
            {
                "description": "Move Method public defaultOutlierTooltips() from class jetbrains.datalore.plot.builder.tooltip.TooltipContentGeneratorTest to public defaultOutlierTooltips() from class jetbrains.datalore.plot.config.TooltipConfigTest"
            },
            {
                "description": "Move And Rename Method public userOutlierTooltips() from class jetbrains.datalore.plot.builder.tooltip.TooltipContentGeneratorTest to public configOutlierTooltips() from class jetbrains.datalore.plot.config.TooltipConfigTest"
            },
            {
                "description": "Move Method public defaultTooltips() from class jetbrains.datalore.plot.builder.tooltip.TooltipContentGeneratorTest to public defaultTooltips() from class jetbrains.datalore.plot.config.TooltipConfigTest"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/lets-plot.git",
        "sha1": "71222b81fc9401f18d1002677060851e74a75a49",
        "refactorings": [
            {
                "description": "Move Method private createHiddenAesList(geomKind GeomKind) : List<Aes<*>> from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private createHiddenAesList(geomKind GeomKind) : List<Aes<*>> from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            },
            {
                "description": "Add Parameter geomInteraction : GeomInteraction in method private createLayerBuilder(layerConfig LayerConfig, scaleProvidersMap TypedScaleProviderMap, geomInteraction GeomInteraction) : GeomLayerBuilder from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil"
            },
            {
                "description": "Move Method private createTooltipValueSourceList(tooltipLineSpecifications List<TooltipLineSpecification>) : List<ValueSource> from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private createTooltipValueSourceList(tooltipLineSpecifications List<TooltipLineSpecification>) : List<ValueSource> from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            },
            {
                "description": "Move Method private initGeomInteractionBuilder(renders List<Aes<*>>, geomKind GeomKind, statKind StatKind) : GeomInteractionBuilder from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private initGeomInteractionBuilder(renders List<Aes<*>>, geomKind GeomKind, statKind StatKind) : GeomInteractionBuilder from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            },
            {
                "description": "Move Method private createTooltipAesList(layerConfig LayerConfig, axisAes List<Aes<*>>) : List<Aes<*>> from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private createTooltipAesList(layerConfig LayerConfig, axisAes List<Aes<*>>) : List<Aes<*>> from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            },
            {
                "description": "Move Method internal createGeomInteractionBuilder(renders List<Aes<*>>, geomKind GeomKind, statKind StatKind, multilayer Boolean) : GeomInteractionBuilder from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private createGeomInteractionBuilder(renders List<Aes<*>>, geomKind GeomKind, statKind StatKind, multilayer Boolean) : GeomInteractionBuilder from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            },
            {
                "description": "Move Method private createAxisAesList(geomBuilder GeomInteractionBuilder, geomKind GeomKind) : List<Aes<*>> from class jetbrains.datalore.plot.config.PlotConfigClientSideUtil to private createAxisAesList(geomBuilder GeomInteractionBuilder, geomKind GeomKind) : List<Aes<*>> from class jetbrains.datalore.plot.config.GeomInteractionUtil"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/lets-plot.git",
        "sha1": "ce848440fa62a7730d1e9e779eed0f10b7adf633",
        "refactorings": [
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.CountStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.SmoothStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.Density2dStat"
            },
            {
                "description": "Move Method public sampleWithoutReplacement(popSize Int, sampleSize Int, rand Random, onPick (Set<Int>) -> T, onDrop (Set<Int>) -> T) : T from class jetbrains.datalore.plot.builder.sampling.method.SamplingUtil to public sampleWithoutReplacement(popSize Int, sampleSize Int, rand Random, onPick (Set<Int>) -> T, onDrop (Set<Int>) -> T) : T from class jetbrains.datalore.plot.base.util.SamplingUtil"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.ContourfStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.AbstractDensity2dStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.Density2dfStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.BoxplotStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.ContourStat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.Stat"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.DensityStat"
            },
            {
                "description": "Add Parameter messageConsumer : Consumer<String> in method public buildStatData(data DataFrame, stat Stat, bindings List<VarBinding>, groupingContext GroupingContext, facetXVar String?, facetYVar String?, statCtx StatContext, messageConsumer Consumer<String>) : DataAndGroupingContext from class jetbrains.datalore.plot.builder.data.DataProcessing"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.BinStat"
            },
            {
                "description": "Add Parameter compMessageConsumer : Consumer<String> in method private applyStat(data DataFrame, stat Stat, bindings List<VarBinding>, facetXVarName String?, facetYVarName String?, statCtx StatContext, compMessageConsumer Consumer<String>) : DataFrame from class jetbrains.datalore.plot.builder.data.DataProcessing"
            },
            {
                "description": "Add Parameter messageConsumer : (s: String) -> Unit in method public apply(data DataFrame, statCtx StatContext, messageConsumer (s: String) -> Unit) : DataFrame from class jetbrains.datalore.plot.base.stat.Bin2dStat"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "67c0bfffc84088dcdbb88a2b7bcc90aec3e764a9",
        "refactorings": [
            {
                "description": "Pull Up Method public getDescription() : String from class shapes.Square to public getDescription() : String from class shapes.Rectangle"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "1a29b2b054ee6593bf9a262cbdb7e0a9b33283a8",
        "refactorings": [
            {
                "description": "Push Down Method public getDescription() : String from class shapes.Rectangle to public getDescription() : String from class shapes.Square"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "cdbf991f83fd3e9fe2d0b47fc171a9d3c7ccb28e",
        "refactorings": [
            {
                "description": "Add Parameter visitOnce : Boolean in method public visitCallExpressionsWithReferences(binding BindingContext, filter (KtCallExpression) -> Boolean, visitOnce Boolean, body (KtCallExpression) -> Unit) from class Expression.kt"
            },
            {
                "description": "Add Parameter visitOnce : Boolean in method public visitAnnotatedWithReferences(binding BindingContext, filter (KtAnnotated) -> Boolean, visitOnce Boolean, body (KtAnnotated) -> Unit) from class Expression.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "779e447cd4336832b2daa900f3dc00f78c45c09d",
        "refactorings": [
            {
                "description": "Add Parameter filter : (KtExpression) -> Boolean in method public visitAllExpressions(context BindingContext, filter (KtExpression) -> Boolean, alreadyGot Set<KtElement>, body (KtExpression) -> Unit) from class Expression.kt"
            },
            {
                "description": "Rename Method public processObject(files Set<KtFile>, binding BindingContext, body (KtObjectDeclaration,KClass<*>) -> Unit) renamed to public processObjects(files Set<KtFile>, binding BindingContext, body (KtObjectDeclaration,KClass<*>) -> Unit) in class io.kotless.parser.processor.SubTypesProcessor"
            },
            {
                "description": "Rename Method public processClass(files Set<KtFile>, binding BindingContext, body (KtClass,KClass<*>) -> Unit) renamed to public processClasses(files Set<KtFile>, binding BindingContext, body (KtClass,KClass<*>) -> Unit) in class io.kotless.parser.processor.SubTypesProcessor"
            },
            {
                "description": "Rename Method public processClassOrObject(files Set<KtFile>, binding BindingContext, body (KtClassOrObject,KClass<*>) -> Unit) renamed to public processClassesOrObjects(files Set<KtFile>, binding BindingContext, body (KtClassOrObject,KClass<*>) -> Unit) in class io.kotless.parser.processor.SubTypesProcessor"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "f1d820596e81d3dff00d5f9d956f87f74a2d96c6",
        "refactorings": [
            {
                "description": "Extract Interface shapes.Shape from classes [shapes.Circle, shapes.Rectangle]"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "99f12c40f4a3d73b294f201d2bf0978015b417c9",
        "refactorings": [
            {
                "description": "Extract Class person.Car from class Person"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "85f42cbb8cda603dca6544f4c7039ab268256f48",
        "refactorings": [
            {
                "description": "Inline Method public isAgeMoreThanZero() : Boolean inlined to public isAgeValid() : Boolean in class Person"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "ee3937e9d8ab68ff3c23b081a045cfe2c0625070",
        "refactorings": [
            {
                "description": "Inline Method public getTextId() : String inlined to public getPersonId() : String in class Person"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/kotlin-refactoring-samples.git",
        "sha1": "036af43fb8c000db957af741cc31f4c6cefac363",
        "refactorings": [
            {
                "description": "Extract Method public printId() extracted from public printInfo() in class Person"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "b1dd91ea6f418acd3e5ee49c2a40eaf499c1240e",
        "refactorings": [
            {
                "description": "Extract Method protected visitReferenceTree(reference KtElement, target KtElement) extracted from public visitReferenceExpression(expression KtReferenceExpression) in class io.kotless.parser.utils.psi.visitor.KtReferenceFollowingVisitor"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "e1cbb66d414fdfc7662789bc20b4e288655d4149",
        "refactorings": [
            {
                "description": "Extract Method private dumpGeneratedFiles(generated Set<TFFile>) extracted from public act() in class io.kotless.plugin.gradle.tasks.gen.KotlessGenerateTask"
            },
            {
                "description": "Rename Parameter file : File to directory : File in method public writeToDirectory(directory File) : File in class io.kotless.terraform.TFFile"
            },
            {
                "description": "Rename Method public write(file File) renamed to public writeToDirectory(directory File) : File in class io.kotless.terraform.TFFile"
            },
            {
                "description": "Extract Method private dumpGeneratedFiles(infra TFFile) extracted from public act() in class io.kotless.plugin.gradle.tasks.gen.KotlessLocalGenerateTask"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "fa0b54989337508e93a6c690dbad248173d528b9",
        "refactorings": [
            {
                "description": "Extract Method private initMaps() extracted from public initialize() in class ui.Controller"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "22da56bd58ec51896626689321b4c04084543ba7",
        "refactorings": [
            {
                "description": "Extract Method private sendDataToServer(request Request) : Boolean extracted from public sendTrackingData(file File) in class PluginServer"
            },
            {
                "description": "Extract Method private sendActivityTrackerData() extracted from public sendTrackingData(file File) in class PluginServer"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "997be50343d6ba9aa70657cc6e68677f238d8700",
        "refactorings": [
            {
                "description": "Move Class Task moved to models.Task"
            },
            {
                "description": "Move Class Example moved to models.Example"
            },
            {
                "description": "Extract Method private getCollection(url String, collection Model) : List<T> extracted from public getTasks() : List<Task> in class PluginServer"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains-Research/codetracker.git",
        "sha1": "1569025cddabed1e13621dd4f4e3c61dfb766aa7",
        "refactorings": [
            {
                "description": "Extract Method private initWithServer(panel JPanel, project Project, scale Double) extracted from public createContent(project Project) : JComponent in class org.jetbrains.research.ml.codetracker.ui.MainController"
            },
            {
                "description": "Extract Method private initWithoutServer(panel JPanel, project Project, scale Double) extracted from public createContent(project Project) : JComponent in class org.jetbrains.research.ml.codetracker.ui.MainController"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "d396ad3df39bcea35398a807833323929422734f",
        "refactorings": [
            {
                "description": "Remove Parameter group : String in method public getDependency(project Project, group String, name String) : Dependency? from class io.kotless.plugin.gradle.utils.Dependencies"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "9689625b77ad018fae9711a3a6021debf031eeb7",
        "refactorings": [
            {
                "description": "Move Class io.kotless.plugin.gradle.utils.Dependencies moved to io.kotless.plugin.gradle.utils.gradle.Dependencies"
            },
            {
                "description": "Move Class io.kotless.plugin.gradle.utils.Groups moved to io.kotless.plugin.gradle.utils.gradle.Groups"
            },
            {
                "description": "Rename Class io.kotless.plugin.gradle.utils.Archiver renamed to io.kotless.plugin.gradle.utils.Archive"
            },
            {
                "description": "Change Parameter Type archiver : Archiver to archiver : Archive in method public download(url URL, toFile File, archiver Archive) in class io.kotless.plugin.gradle.utils.Downloads"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "0dd96c0d843fe0d281fad45e155c2ba769b69887",
        "refactorings": [
            {
                "description": "Add Parameter task : String in method public test generate time site example(task String, time IntRange) from class io.kotless.plugin.gradle.ExampleProjectTests"
            },
            {
                "description": "Add Parameter time : IntRange in method public test generate time site example(task String, time IntRange) from class io.kotless.plugin.gradle.ExampleProjectTests"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "0be03b9e8500424f3d1ed8dd006bb4f46c255c90",
        "refactorings": [
            {
                "description": "Move Class io.kotless.Lambda moved to io.kotless.resource.Lambda"
            },
            {
                "description": "Move Class io.kotless.Permission moved to io.kotless.permission.Permission"
            },
            {
                "description": "Move Class io.kotless.StaticResource moved to io.kotless.resource.StaticResource"
            },
            {
                "description": "Rename Class io.kotless.Webapp renamed to io.kotless.Application"
            },
            {
                "description": "Change Parameter Type entity : Webapp.ApiGateway.Deployment to entity : Application.ApiGateway.Deployment in method public generate(entity Application.ApiGateway.Deployment, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.apigateway.DeploymentFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.ApiGateway to entity : Application.ApiGateway in method public generate(entity Application.ApiGateway, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.apigateway.DomainFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.ApiGateway to entity : Application.ApiGateway in method public generate(entity Application.ApiGateway, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.apigateway.RestAPIFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.Events.Scheduled to entity : Application.Events.Scheduled in method public mayRun(entity Application.Events.Scheduled, context GenerationContext) : Boolean in class io.kotless.gen.factory.event.ScheduledEventsFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.Events.Scheduled to entity : Application.Events.Scheduled in method public generate(entity Application.Events.Scheduled, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.event.ScheduledEventsFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp to entity : Application in method public generate(entity Application, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.info.InfoFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.ApiGateway.DynamicRoute to entity : Application.ApiGateway.DynamicRoute in method public generate(entity Application.ApiGateway.DynamicRoute, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route.dynamic.DynamicRouteFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp to entity : Application in method public generate(entity Application, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route.static.StaticRoleFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.ApiGateway.StaticRoute to entity : Application.ApiGateway.StaticRoute in method public generate(entity Application.ApiGateway.StaticRoute, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route.static.StaticRouteFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.Route53 to entity : Application.Route53 in method public generate(entity Application.Route53, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route53.CertificateFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.Route53 to entity : Application.Route53 in method public generate(entity Application.Route53, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route53.ZoneFactory"
            },
            {
                "description": "Change Parameter Type entity : Webapp.Route53 to entity : Application.Route53 in method public generate(entity Application.Route53, context GenerationContext) : GenerationFactory.GenerationResult in class io.kotless.gen.factory.route53.RecordFactory"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "f9b886f864eb46122936a7ffe4c8d128cfc78765",
        "refactorings": [
            {
                "description": "Rename Method private getBaseFolder(element KtElement, binding BindingContext, context ProcessorContext) : File renamed to private getStaticRootFolder(element KtElement, binding BindingContext, context ProcessorContext) : File in class io.kotless.parser.ktor.processor.route.StaticRoutesProcessor"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "530fa72a73bc4b04d647fcd46cba63518320a407",
        "refactorings": [
            {
                "description": "Move Method private getParent(name String) : Path? from class io.kotless.parser.spring.SpringParser to private getParent(name String) : Path? from class io.kotless.parser.spring.processor.route.StaticRoutesProcessor"
            },
            {
                "description": "Move Method private createResource(file File, path URIPath, context ProcessorContext) from class io.kotless.parser.spring.SpringParser to private createResource(file File, path URIPath, context ProcessorContext) from class io.kotless.parser.spring.processor.route.StaticRoutesProcessor"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "2552b58ae42daa0e82294e76f2ecf76e5c6443b1",
        "refactorings": [
            {
                "description": "Rename Method public getMethod(binding BindingContext, func KtNamedFunction) : HttpMethod renamed to public getMethods(binding BindingContext, func KtNamedFunction) : Set<HttpMethod> in class io.kotless.parser.spring.processor.route.SpringAnnotationUtils"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "8a3e4f2d9fbca882ec9497b0fbaa2cb94d8dca00",
        "refactorings": [
            {
                "description": "Add Parameter context : BindingContext in method public visitAnnotatedWithReferences(context BindingContext, filter (KtAnnotated) -> Boolean, body (KtAnnotated) -> Unit) from class Expression.kt"
            },
            {
                "description": "Rename Method public visitAnnotated(filter (KtAnnotated) -> Boolean, body (KtAnnotated) -> Unit) renamed to public visitAnnotatedWithReferences(context BindingContext, filter (KtAnnotated) -> Boolean, body (KtAnnotated) -> Unit) in class Expression.kt"
            }
        ]
    },
    {
        "repository": "https://github.com/JetBrains/kotless.git",
        "sha1": "7456af0d1354403723c651ac11edbf4fd630432c",
        "refactorings": [
            {
                "description": "Move Class io.kotless.parser.SpringParser moved to io.kotless.parser.spring.SpringParser"
            },
            {
                "description": "Rename Parameter inputStream : InputStream to input : InputStream in method public handleRequest(input InputStream, output OutputStream, context Context) in class io.kotless.dsl.spring.Kotless"
            },
            {
                "description": "Rename Parameter outputStream : OutputStream to output : OutputStream in method public handleRequest(input InputStream, output OutputStream, context Context) in class io.kotless.dsl.spring.Kotless"
            },
            {
                "description": "Change Parameter Type param : KProperty1<out Annotation, Array<out T>> to param : KProperty<Array<T>> in method public getArrayValue(context BindingContext, param KProperty<Array<T>>) : Array<T> in class Getters.kt"
            }
        ]
    }
]
